@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using Microsoft.Extensions.Logging
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILogger<Dog> Logger

@using DogsZurich.Shared

@page "/"


<PageTitle>DogsofZurich</PageTitle>

<h1>Hunde der Stadt Zürich</h1>

@if (dogs == null)
{
        <p>Laden...</p>
}
else
{
        <table class="table">
            <thead>
                    
                <tr>
                        <th>Name des Hundes</th>
                    <th>Rassentype</th>
                    <th>Reinrassig <p>oder Mischling</p></th>
                    <th>Rasse 1</th>
                    <th>Rasse 2</th>
                    <th>Geschlecht</th>
                    <th>Fellfarbe</th
                    <th>Besitzer Id</th>
                    <td>
                            <th>Rasse 1</th>
                            <select @bind="selectedBreed1">
        <option value="">All</option>
                        @foreach (var breed in breeds1)
                        {
                <option value="@breed.Description">@breed.Description</option>
                        }
    </select>
        <th>Rasse 2</th>
    <select @bind="selectedBreed2">
        <option value="">All</option>
                        @foreach (var breed in breeds2)
                        {
                <option value="@breed.Description">@breed.Description</option>
                        }
    </select>

                    </td>
                    <td><input type="text" @bind="searchTerm" placeholder="Namens Suche" />
    <button @onclick="SearchDogs">Suchen</button></td>

                </tr>
            </thead>
            <tbody>
            @if (dogs.Count() == 0)
            {
                        <tr>
                            <td colspan="3">There are no Dogs yet.</td>
                        </tr>
            }
            else
            {
                @foreach (var item in dogs.Where(d => (selectedBreed1 == "" || d.Breed1.Description == selectedBreed1) && (selectedBreed2 == "" || d.Breed2.Description == selectedBreed2) && (string.IsNullOrEmpty(searchTerm) || d.Name.Contains(searchTerm))))
                @*@foreach (var item in dogs.Where(d => (selectedBreed1 == "" || d.Breed1.Description == selectedBreed1) && (selectedBreed2 == "" || d.Breed2.Description == selectedBreed2)))*@
                @*@foreach (var item in dogs)*@
                {
                                <tr>
                                    <td>@item.Name</td>
                                    <td>@item.Breedtype.Description</td>
                                    <td>@item.Breedstatus.Description</td>
                                    <td>@item.Breed1.Description</td>
                                    @if ( @item.Breed2 == null){
                                        <td> - </td>
                                    }else {
                                    <td>@item.Breed2.Description</td>}
                                    <td>@item.Sex.Description</td>
                                    <td>@item.Colors.Description</td>
                                    <td>@item.Dogowner.Id</td>

                                    <td><button class="btn btn-warning" @onclick="(() =>DeleteDog(item.Id))">Delete</button></td>
                                    <td><button class="btn btn-warning"  @onclick="(() =>NavigateToEditDog(item.Id))">Edit Dog</button></td>
                       
                                </tr>
                }
            }
                <tr>
                    <td><button class="btn btn-info" @onclick="(() =>NavigateToOwnerView())">Owner View</button></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td><button class="btn btn-info" @onclick="(() =>NavigateToCreateComponent())">Add Dog</button></td>
                </tr>

            </tbody>
        </table>
}


@code {

    private List<Dog> dogs ;
    private string selectedBreed1 = "";
    private string selectedBreed2 = "";
    private List<Breed> breeds1;
    private List<Breed> breeds2;
    private int selectedDogId;
    private string searchTerm;


    private const string ServiceEndpoint = "/api";

    protected override async Task OnInitializedAsync() => await GetServerData();
    private async Task GetServerData()
    {
        dogs = await Http.GetFromJsonAsync<List<Dog>>($"{ServiceEndpoint}/Dogs");
        breeds1 = await Http.GetFromJsonAsync<List<Breed>>($"{ServiceEndpoint}/Breeds");
        breeds2 = await Http.GetFromJsonAsync<List<Breed>>($"{ServiceEndpoint}/Breeds");
    }
    private async Task DeleteDog(int id)
    {
        await Http.DeleteAsync($"{ServiceEndpoint}/Dogs/{id}");
        await GetServerData();
    }
    private void NavigateToCreateComponent()
    {
        NavigationManager.NavigateTo($"/Dogs/add");
    }
    private void NavigateToOwnerView()
    {
        NavigationManager.NavigateTo($"/Dogowners/view");
    }

    private void NavigateToEditDog(int id)
    {

        NavigationManager.NavigateTo($"/dogs/edit/{id}");
    }

    

    private async Task SearchDogs()
{
var filteredDogs = await Http.GetFromJsonAsync<List<Dog>>($"{ServiceEndpoint}/Dogs?searchTerm={searchTerm}");
if (filteredDogs != null)
{
dogs = filteredDogs;
}
else
{
Logger.LogError("No dogs found with that name");
}
}
}
